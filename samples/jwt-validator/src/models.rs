use serde::Deserialize;

#[derive(Default, Debug, Clone, PartialEq, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct OpenIdConfiguration {
    pub issuer: String,
    #[serde(rename = "jwks_uri")]
    pub jwks_uri: String,
    #[serde(rename = "authorization_endpoint")]
    pub authorization_endpoint: String,
    #[serde(rename = "token_endpoint")]
    pub token_endpoint: String,
    #[serde(rename = "userinfo_endpoint")]
    pub userinfo_endpoint: String,
    #[serde(rename = "end_session_endpoint")]
    pub end_session_endpoint: String,
    #[serde(rename = "check_session_iframe")]
    pub check_session_iframe: String,
    #[serde(rename = "revocation_endpoint")]
    pub revocation_endpoint: String,
    #[serde(rename = "introspection_endpoint")]
    pub introspection_endpoint: String,
    #[serde(rename = "device_authorization_endpoint")]
    pub device_authorization_endpoint: String,
    #[serde(rename = "backchannel_authentication_endpoint")]
    pub backchannel_authentication_endpoint: String,
    #[serde(rename = "pushed_authorization_request_endpoint")]
    pub pushed_authorization_request_endpoint: String,
    #[serde(rename = "require_pushed_authorization_requests")]
    pub require_pushed_authorization_requests: bool,
    #[serde(rename = "frontchannel_logout_supported")]
    pub frontchannel_logout_supported: bool,
    #[serde(rename = "frontchannel_logout_session_supported")]
    pub frontchannel_logout_session_supported: bool,
    #[serde(rename = "backchannel_logout_supported")]
    pub backchannel_logout_supported: bool,
    #[serde(rename = "backchannel_logout_session_supported")]
    pub backchannel_logout_session_supported: bool,
    #[serde(rename = "scopes_supported")]
    pub scopes_supported: Vec<String>,
    #[serde(rename = "claims_supported")]
    pub claims_supported: Vec<String>,
    #[serde(rename = "grant_types_supported")]
    pub grant_types_supported: Vec<String>,
    #[serde(rename = "response_types_supported")]
    pub response_types_supported: Vec<String>,
    #[serde(rename = "response_modes_supported")]
    pub response_modes_supported: Vec<String>,
    #[serde(rename = "token_endpoint_auth_methods_supported")]
    pub token_endpoint_auth_methods_supported: Vec<String>,
    #[serde(rename = "id_token_signing_alg_values_supported")]
    pub id_token_signing_alg_values_supported: Vec<String>,
    #[serde(rename = "subject_types_supported")]
    pub subject_types_supported: Vec<String>,
    #[serde(rename = "code_challenge_methods_supported")]
    pub code_challenge_methods_supported: Vec<String>,
    #[serde(rename = "request_parameter_supported")]
    pub request_parameter_supported: bool,
    #[serde(rename = "request_object_signing_alg_values_supported")]
    pub request_object_signing_alg_values_supported: Vec<String>,
    #[serde(rename = "prompt_values_supported")]
    pub prompt_values_supported: Vec<String>,
    #[serde(rename = "authorization_response_iss_parameter_supported")]
    pub authorization_response_iss_parameter_supported: bool,
    #[serde(rename = "backchannel_token_delivery_modes_supported")]
    pub backchannel_token_delivery_modes_supported: Vec<String>,
    #[serde(rename = "backchannel_user_code_parameter_supported")]
    pub backchannel_user_code_parameter_supported: bool,
    #[serde(rename = "dpop_signing_alg_values_supported")]
    pub dpop_signing_alg_values_supported: Vec<String>,
}
